---
layout: post
title: "My 2012 front-end <em>web development workflow</em>"
date: 2012-05-21 16:47
comments: true
categories:
style:
published:
---
So far 2012 has been a big year for me in progressing my front-end web development skills, tools and process. I've also been busy learning new languages and frameworks and getting up to speed on the latest advancements.

Here's what's changed in 2012:

##Languages / frameworks

- [<abbr title="Syntactically Awesome Stylesheets">SASS</abbr>](http://sass-lang.com/) / [Compass](http://compass-style.org/) &mdash; this has *totally transformed the way I write <abbr title="Cascading Style Sheets">CSS</abbr>*, and if you're into Compass, I highly recommend the [Susy responsive grid system](http://susy.oddbird.net/) by [Oddbird](http://oddbird.net/) (*semantic grids in <abbr title="Syntactically Awesome Stylesheets">SASS</abbr> have been a game-changer for me*). I'm currently using the <abbr title="Sassy CSS">SCSS</abbr> flavour of <abbr title="Syntactically Awesome Stylesheets">SASS</abbr>, and when I refer to <abbr title="Syntactically Awesome Stylesheets">SASS</abbr>, I usually mean <abbr title="Sassy CSS">SCSS</abbr>. I'm aware of the whole [<abbr title="Syntactically Awesome Stylesheets">SASS</abbr> vs. LESS](http://css-tricks.com/sass-vs-less/) debate, but I'm not going there.
- [Git](http://git-scm.com/) / [GitHub](https://github.com/) &mdash; I hate to admit it, but when I first started out, I edited sites directly on the live server via <abbr title="File Transfer Protocol">FTP</abbr> without a version control system. *Never again!* There are many [great](http://git-scm.com/documentation) [free](http://git-scm.com/book) [resources](http://gitready.com/) available online for learning Git.
- [<abbr title="HTML Abstraction Markup Language">HAML</abbr>](http://haml.info/) / [Markdown](http://daringfireball.net/projects/markdown/) &mdash; makes writing <abbr title="HyperText Markup Language">HTML</abbr> quick and enjoyable. This post was written in Markdown.
- [Ruby](http://www.ruby-lang.org/en/) &mdash; I'm just dipping my toes into Ruby, but I'm hoping to develop my skills in Ruby and [Ruby on Rails](http://rubyonrails.org/) over the next year. I've also wanted to expand my knowledge beyond the <abbr title="Linux Apache MySQL PHP">LAMP</abbr> stack for some time.
- [Octopress](http://octopress.org/) &mdash; this site is powered by Octopress, which is an excellent framework designed by [Brandon Mathis](http://brandonmathis.com/) for [Jekyll](https://github.com/mojombo/jekyll). When I set out to build this blog I knew I wanted a static ("baked") site, and [awareness of Octopress](http://theindustry.cc/2012/03/06/2-responsive-sass-awkward-hugs/) and the benefits "baked" blogs has been increasing lately.
- Command line &mdash; it goes without saying that the languages and frameworks listed above require some knowledge of, and being *comfortable in the command line*. This is something I'm still relatively new to, but I'm already seeing improvements in my productivity as I do more in the command line.

##Tools
- [Sublime Text 2](http://www.sublimetext.com/2) &mdash; I recently switched to Sublime Text 2 for all of my text editing / coding and it's phenomenal. I can't recommend it highly enough. This is responsible for my single biggest jump in speed / productivity in a long time. [Learn it](http://opensoul.org/blog/archives/2012/01/12/getting-started-with-sublime-text-2/) [inside out](http://net.tutsplus.com/tutorials/tools-and-tips/sublime-text-2-tips-and-tricks/), learn all the keyboard shortcuts and [get as many great extensions as you can](http://net.tutsplus.com/tutorials/tools-and-tips/essential-sublime-text-2-plugins-and-extensions/). Opening files in Sublime Text 2 from the command line is also a great way to speed up your workflow &mdash; it's lightning quick.
- [Chrome](https://www.google.com/chrome) / [Chrome Canary](https://tools.google.com/dlpage/chromesxs) &mdash; these days I'm mostly designing in the browser, and I've recently switched to Chrome and Chrome Canary as my default browsers for all development, due to the excellent [Chrome Developer Tools](https://developers.google.com/chrome-developer-tools/docs/overview). To get the most out of the power of Chrome's Developer Tools, it's worth taking the time to [learn](http://youtu.be/N8SS-rUEZPg) [what they can do](http://jtaby.com/2012/04/23/modern-web-development-part-1.html), check out [some of the recent advances](https://vimeo.com/40929961), and install some developer extensions. For debugging or designing in the browser, you should definitely check out the amazing [Chrome DevTools Autosave](https://github.com/NV/chrome-devtools-autosave) by [Nikita Vasilyev](http://elv1s.ru/). It allows you to edit <abbr title="Cascading Style Sheets">CSS</abbr> and JavaScript in Chrome's Developer Tools and autosaves those changes to your source files (no more copy and paste).
- [CodeKit](http://incident57.com/codekit/) &mdash; makes running projects using <abbr title="Syntactically Awesome Stylesheets">SASS</abbr>, Compass, <abbr title="HTML Abstraction Markup Language">HAML</abbr>, [LESS](http://lesscss.org/), etc a breeze. It compiles everything on the fly, live reloads your browser, optimises images and a lot more.
- [TextExpander](http://smilesoftware.com/TextExpander/) &mdash; since I move to Sublime Text 2, I needed a new way of managing my code snippets. I've been trialling TextExpander, which is a great system, but I now think I'll move all of my code snippets to [Github Gists](https://gist.github.com/) and insert snippets into Sublime Text 2 using this brilliant [Gist plugin](https://github.com/dlazic88/Gist).
- [MAMP Pro](http://www.mamp.info/en/mamp-pro/) &mdash; an essential part of my toolkit for local development, plus it allows you to quickly setup virtual hosts, which is useful for local Windows and Internet Explorer testing on the Mac. Recently, I've been using this less now that I've started building sites in Ruby and using [WEBrick](http://en.wikipedia.org/wiki/WEBrick).
- [iTerm 2](http://www.iterm2.com/) &mdash; this is a great Terminal replacement for the Mac. I often have several different shells open at a time, and iTerm 2's split vertical view is perfect for this.
- [VMware Fusion](http://www.vmware.com/products/fusion/overview.html) &mdash; for testing and debugging sites in Windows and Internet Explorer. Using MAMP Pro's virtual hosts you can also [setup a local development environment for testing on Windows](http://seansperte.com/entry/Setting_Up_a_Killer_Local_Web_Development_Environment_on_a_Mac_with_MAMP_an).
- [Adobe Shadow](http://labs.adobe.com/technologies/shadow/) &mdash; this website was designed exclusively in the browser (Chrome) on my MacBook Pro, but throughout the entire process the site was also open in Adobe Shadow on my iPhone 3GS and iPad 2. This has totally transformed my mobile-first, responsive web design process. *These devices are no longer used for testing the assumptions I've made in a narrow width desktop browser, they are now central to the design and development process*. On a side note, this really drains battery power fast, so keep all devices plugged into a power supply.
- [Dropbox](https://www.dropbox.com/) &mdash; this is an obvious one, but worth mentioning. Essential for syncing documents between different devices and backup of files that don't live in version control.

##Productivity Tools
- [Alfred](http://www.alfredapp.com/) &mdash; I'm a recent convert to Alfred and I love it. Now that I'm using the command line a lot more, I find I'm using my trackpad and mouse less. Alfred allows me to launch applications, search Google and get things done quickly without leaving the keyboard.
- [Divvy](http://mizage.com/divvy/) &mdash; great for quick and easy window management, for example, if you have your browser and text editor open alongside each other.

##Conclusion
Keeping up with the rapid change in front-end web development can be pretty challenging at times, but it can also be a lot of fun. Although it may sound like I'm using a lot of different tools in my workflow, I can pretty much get by for most development with just Chrome, Sublime Text 2, iTerm 2 and Adobe Shadow open at any one time. I've never been happier with my front-end development tools / process and look forward to refining this setup over the coming year.

If anyone has any suggestions, additions, or comments, I'd love to hear from you.